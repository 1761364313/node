"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dbConnect_1 = require("../utils/dbConnect");
const getTrans_1 = __importDefault(require("../utils/getTrans"));
const constants_1 = require("../constants/constants");
const utils_1 = require("../utils/utils");
function fetchGet(structure, params = '', query = {}) {
    return new Promise((resolve, reject) => {
        let tempGet = getTrans_1.default(params, { structure }, constants_1.PLATFORM_NAME.REDIS);
        dbConnect_1.redisClient[tempGet.method](...tempGet.key, (err, reply) => __awaiter(this, void 0, void 0, function* () {
            try {
                if (err) {
                    reject({ err });
                }
                let tempRes = {};
                if (query.expireSec) {
                    tempRes['expireSec'] = {};
                    for (let k = 0; k < tempGet.key.length; k++) {
                        let t = yield dbConnect_1.redisGetExpire(tempGet.key[k], 1);
                        tempRes[tempGet.key[k]] = utils_1.isArray(reply) ? reply[k] : reply;
                        tempRes['expireSec'][tempGet.key[k]] = t;
                    }
                }
                else if (query.expireMillisec) {
                    tempRes['expireMillisec'] = {};
                    for (let k = 0; k < tempGet.key.length; k++) {
                        let t = yield dbConnect_1.redisGetExpire(tempGet.key[k], 2);
                        tempRes[tempGet.key[k]] = utils_1.isArray(reply) ? reply[k] : reply;
                        tempRes['expireMillisec'][tempGet.key[k]] = t;
                    }
                }
                else {
                    for (let k = 0; k < tempGet.key.length; k++) {
                        tempRes[tempGet.key[k]] = utils_1.isArray(reply) ? reply[k] : reply;
                    }
                }
                resolve({ data: tempRes });
            }
            catch (err2) {
                reject(err2);
            }
        }));
    });
}
exports.default = fetchGet;
