"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dbConnect_1 = require("../utils/dbConnect");
const updateTrans_1 = __importDefault(require("../utils/updateTrans"));
const constants_1 = require("../constants/constants");
const error_1 = require("../constants/error");
function fetchUpdate(structure, params = {}) {
    return new Promise((resolve, reject) => {
        let tempData = updateTrans_1.default(params, { structure }, constants_1.PLATFORM_NAME.REDIS);
        if (tempData.keyValue.length < 2) {
            throw new Error(error_1.REDIS_SET_ERROR);
        }
        // TODO  过期时间、过期日期的更新
        dbConnect_1.redisClient[tempData.method](...tempData.keyValue, (err, reply) => __awaiter(this, void 0, void 0, function* () {
            if (err) {
                reject({ err });
            }
            resolve({ data: reply });
        }));
    });
}
exports.default = fetchUpdate;
