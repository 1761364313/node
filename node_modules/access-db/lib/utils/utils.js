"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.changeFindGeoJson = exports.changeSetManyParams = exports.changeSetParams = exports.cloneDeep = exports.isNumber = exports.isArray = exports.isJson = void 0;
const error_1 = require("../constants/error");
exports.isJson = (value) => {
    return typeof (value) === 'object';
};
//isArray属于isJson
exports.isArray = (value) => {
    return Object.prototype.toString.call(value) === '[object Array]';
};
exports.isNumber = (value) => {
    return typeof (value) === 'number' && !isNaN(value);
};
// 检查polygon是否对
const isPolygonArr = (arr) => {
    if ((arr.length < 4) || (arr[0][0] !== arr[arr.length - 1][0]) || (arr[0][1] !== arr[arr.length - 1][1])) {
        throw new Error(error_1.GEO_POLYGON_ERROR);
    }
    else {
        return true;
    }
};
// 目前仅支持对象或数字的拷贝
exports.cloneDeep = (source) => {
    if (source === undefined || source === null)
        return Object.create(null);
    const target = exports.isArray(source) ? [] : Object.create(Object.getPrototypeOf(source));
    for (const keys in source) {
        if (source.hasOwnProperty(keys)) {
            if (source[keys] && typeof source[keys] === 'object') {
                target[keys] = exports.isArray(source[keys]) ? [] : {};
                target[keys] = exports.cloneDeep(source[keys]);
            }
            else {
                target[keys] = source[keys];
            }
        }
    }
    return target;
};
// 返回新增的对象，geopoint化
exports.changeSetParams = (params) => {
    let changeData = params;
    for (let p in params) {
        if (exports.isArray(params[p])) {
            if (params[p][0] === 'geo') {
                if (exports.isArray(params[p][1])) {
                    let temp = params[p];
                    temp.shift();
                    if (temp.length > 1) {
                        isPolygonArr(temp);
                        changeData[p] = exports.cloneDeep({
                            type: 'Polygon',
                            coordinates: [temp]
                        });
                    }
                    else {
                        changeData[p] = exports.cloneDeep({
                            type: 'Point',
                            coordinates: temp[0]
                        });
                    }
                }
            }
        }
    }
    return changeData;
};
exports.changeSetManyParams = (params) => {
    let change = [];
    for (let i = 0; i < params.length; i++) {
        change.push(exports.changeSetParams(params[i]));
    }
    return change;
};
// 返回geojson
exports.changeFindGeoJson = (lparams) => {
    let temp = [];
    if (lparams[1] === 'within') {
        lparams.splice(0, 2);
        isPolygonArr(lparams);
        temp = exports.cloneDeep({
            type: 'Polygon',
            coordinates: [lparams]
        });
    }
    else {
        temp = exports.cloneDeep({
            type: 'Point',
            coordinates: lparams[2]
        });
    }
    return temp;
};
