"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants/constants");
const error_1 = require("../constants/error");
const utils_1 = require("./utils");
function updateTrans(params, query, dbType) {
    let result;
    //Mongo 类平台
    if (dbType === constants_1.PLATFORM_NAME.MONGODB) {
        let operate = {};
        for (let pa in params) {
            let temp = {};
            if (!utils_1.isArray(params[pa])) {
                //不是数组，则直接 set
                temp[pa] = params[pa];
                operate = Object.assign(Object.assign({}, operate), { "$set": Object.assign(Object.assign({}, operate['$set']), temp) });
                continue;
            }
            if (constants_1.MONGODB_UPDATE_METHORD.includes(params[pa][0])) {
                switch (params[pa][0]) {
                    case 'set':
                        temp[pa] = params[pa][1];
                        operate = Object.assign(Object.assign({}, operate), { "$set": Object.assign(Object.assign({}, operate['$set']), temp) });
                        break;
                    case 'geo':
                        let temp2 = params[pa], tempGeo = {};
                        temp2.shift();
                        if (temp2.length > 1) {
                            tempGeo = utils_1.cloneDeep({
                                type: 'Polygon',
                                coordinates: [temp2]
                            });
                        }
                        else {
                            tempGeo = utils_1.cloneDeep({
                                type: 'Point',
                                coordinates: temp2[0]
                            });
                        }
                        temp[pa] = tempGeo;
                        operate = Object.assign(Object.assign({}, operate), { "$set": Object.assign(Object.assign({}, operate['$set']), temp) });
                        break;
                    case 'unset':
                        temp[pa] = '';
                        operate = Object.assign(Object.assign({}, operate), { "$unset": Object.assign(Object.assign({}, operate['$unset']), temp) });
                        break;
                    case 'incr':
                        temp[pa] = params[pa][1];
                        operate = Object.assign(Object.assign({}, operate), { "$inc": Object.assign(Object.assign({}, operate['$inc']), temp) });
                        break;
                    case 'append':
                        temp[pa] = {
                            "$each": utils_1.isArray(params[pa][1]) ? params[pa][1] : [params[pa][1]]
                        };
                        operate = Object.assign(Object.assign({}, operate), { "$push": Object.assign(Object.assign({}, operate['$push']), temp) });
                        break;
                    case 'uAppend':
                        temp[pa] = {
                            "$each": utils_1.isArray(params[pa][1]) ? params[pa][1] : [params[pa][1]]
                        };
                        operate = Object.assign(Object.assign({}, operate), { "$addToSet": Object.assign(Object.assign({}, operate['$addToSet']), temp) });
                        break;
                    case 'remove':
                        temp[pa] = {
                            "$each": utils_1.isArray(params[pa][1]) ? params[pa][1] : [params[pa][1]]
                        };
                        operate = Object.assign(Object.assign({}, operate), { "$pull": Object.assign(Object.assign({}, operate['$pull']), temp) });
                        break;
                    default:
                        throw new Error(error_1.UPDATE_ERROR);
                }
            }
            else {
                //直接 set
                temp[pa] = params[pa];
                operate = Object.assign(Object.assign({}, operate), { "$set": Object.assign(Object.assign({}, operate['$set']), temp) });
            }
        }
        result = operate;
    }
    //mysql类
    if (dbType === constants_1.PLATFORM_NAME.MYSQL) {
        let operate = [];
        for (let pa in params) {
            if (!utils_1.isArray(params[pa])) {
                //不是数组，则直接 set
                operate.push(`${pa} = ${utils_1.isNumber(params[pa]) ? params[pa] : `'${params[pa]}'`}`);
                continue;
            }
            if (constants_1.MYSQL_UPDATE_METHORD.includes(params[pa][0])) {
                switch (params[pa][0]) {
                    case 'set':
                        operate.push(`${pa} = ${utils_1.isNumber(params[pa][1]) ? params[pa][1] : `'${params[pa][1]}'`}`);
                        break;
                    case 'unset':
                        operate.push(`${pa} = NULL`);
                        break;
                    case 'incr':
                        if (params[pa][1] >= 0) {
                            operate.push(`${pa} = ${pa} + ${params[pa][1]}`);
                        }
                        else {
                            operate.push(`${pa} = ${pa} - ${Math.abs(params[pa][1])}`);
                        }
                        break;
                    default:
                        throw new Error(error_1.UPDATE_ERROR);
                }
            }
            else {
                //直接 set
                operate.push(`${pa} = ${utils_1.isNumber(params[pa]) ? params[pa] : `'${params[pa]}'`}`);
            }
        }
        result = operate;
    }
    //redis
    if (dbType === constants_1.PLATFORM_NAME.REDIS) {
        let keyValue = [], key = [], method = 'set';
        for (let pa in params) {
            let tempValue = '';
            if (!utils_1.isArray(params[pa])) {
                switch (query.structure) {
                    case constants_1.REDIS_STRUCTURE.string:
                        if (utils_1.isJson(params[pa])) {
                            tempValue = JSON.stringify(params[pa]);
                        }
                        else {
                            tempValue = params[pa];
                        }
                        key.push(pa);
                        keyValue.push(pa);
                        keyValue.push(tempValue);
                        method = 'set';
                        break;
                    default:
                        throw new Error(error_1.REDIS_DATA_TYPE_ERROR);
                }
                continue;
            }
            if (constants_1.REDIS_UPDATE_METHORD.includes(params[pa][0])) {
                tempValue = params[pa][1];
                switch (query.structure) {
                    case constants_1.REDIS_STRUCTURE.string:
                        switch (params[pa][0]) {
                            case 'set':
                                if (utils_1.isJson(params[pa])) {
                                    tempValue = JSON.stringify(tempValue);
                                }
                                else {
                                    tempValue = tempValue;
                                }
                                key.push(pa);
                                keyValue.push(pa);
                                keyValue.push(tempValue);
                                method = 'set';
                                break;
                            case 'incr':
                                key.push(pa);
                                keyValue.push(pa);
                                keyValue.push(tempValue);
                                method = 'incrby';
                                break;
                            case 'add':
                                key.push(pa);
                                keyValue.push(pa);
                                keyValue.push(tempValue);
                                method = 'append';
                                break;
                            case 'range':
                                key.push(pa);
                                keyValue.push(pa);
                                keyValue.push(params[pa][2] || 0); //offset 没有则为0
                                keyValue.push(tempValue);
                                method = 'setrange';
                                break;
                            case 'expireSec':
                                key.push(pa);
                                keyValue.push(pa);
                                keyValue.push(tempValue);
                                method = 'expire';
                                break;
                            case 'expireMillisec':
                                key.push(pa);
                                keyValue.push(pa);
                                keyValue.push(tempValue);
                                method = 'pexpire';
                                break;
                            case 'expireAt':
                                key.push(pa);
                                keyValue.push(pa);
                                keyValue.push(tempValue);
                                method = 'expireat';
                                break;
                            case 'expireMilliAt':
                                key.push(pa);
                                keyValue.push(pa);
                                keyValue.push(tempValue);
                                method = 'pexpireat';
                                break;
                            default:
                                throw new Error(query.structure + error_1.REDIS_TYPE_NOMETHOD_ERROR + params[pa][0]);
                        }
                        break;
                    default:
                        throw new Error(error_1.REDIS_DATA_TYPE_ERROR);
                }
            }
            else {
                // 当没有给定的方法时，使用默认set
                switch (query.structure) {
                    case constants_1.REDIS_STRUCTURE.string:
                        if (utils_1.isJson(params[pa])) {
                            tempValue = JSON.stringify(params[pa]);
                        }
                        else {
                            tempValue = params[pa];
                        }
                        key.push(pa);
                        keyValue.push(pa);
                        keyValue.push(tempValue);
                        method = 'set';
                        break;
                    default:
                        throw new Error(error_1.REDIS_DATA_TYPE_ERROR);
                }
            }
        }
        result = { keyValue, key, method };
    }
    //fastdb
    if (dbType === constants_1.PLATFORM_NAME.FASTDB) {
        function operVale(methodValue, oldValue) {
            if (!utils_1.isArray(methodValue)) {
                //不是数组，则直接 set
                return methodValue;
            }
            if (constants_1.FASTDB_UPDATE_METHORD.includes(methodValue[0])) {
                switch (methodValue[0]) {
                    case 'set':
                        return methodValue[1];
                    case 'geo':
                        let temp2 = methodValue, tempGeo = {};
                        temp2.shift();
                        if (temp2.length > 1) {
                            tempGeo = utils_1.cloneDeep({
                                type: 'Polygon',
                                coordinates: [temp2]
                            });
                        }
                        else {
                            tempGeo = utils_1.cloneDeep({
                                type: 'Point',
                                coordinates: temp2[0]
                            });
                        }
                        return tempGeo;
                    case 'unset':
                        return null;
                    case 'incr':
                        return oldValue + methodValue[1];
                    case 'append':
                        if (utils_1.isArray(methodValue[1])) {
                            oldValue = oldValue.concat(methodValue[1]);
                        }
                        else {
                            oldValue.push(methodValue[1]);
                        }
                        return oldValue;
                    case 'uAppend':
                        if (utils_1.isArray(methodValue[1])) {
                            for (let c = 0; c < methodValue[1].length; c++) {
                                if (!oldValue.includes(methodValue[1][c])) {
                                    oldValue.push(methodValue[1][c]);
                                }
                            }
                        }
                        else {
                            if (!oldValue.includes(methodValue[1])) {
                                oldValue.push(methodValue[1]);
                            }
                        }
                        return oldValue;
                    case 'remove':
                        let tempv = [];
                        if (utils_1.isArray(methodValue[1])) {
                            for (let a = 0; a < oldValue.length; a++) {
                                if (!methodValue[1].includes(oldValue[a])) {
                                    tempv.push(oldValue[a]);
                                }
                            }
                        }
                        else {
                            for (let a = 0; a < oldValue.length; a++) {
                                if (![methodValue[1]].includes(oldValue[a])) {
                                    tempv.push(oldValue[a]);
                                }
                            }
                        }
                        return tempv;
                    default:
                        throw new Error(error_1.UPDATE_ERROR);
                }
            }
            else {
                //没有找到对应方法，说明就是数组，直接 set
                return methodValue;
            }
        }
        function changeJson(old, pa, methodValue) {
            let paList = pa.split('.'); // 对参数a.b.c进行数组化
            let tempJ = Object.assign({}, old);
            switch (paList.length) {
                case 1:
                    tempJ[paList[0]] = operVale(methodValue, old[paList[0]]);
                    break;
                case 2:
                    tempJ[paList[0]][paList[1]] = operVale(methodValue, old[paList[0]][paList[1]]);
                    break;
                case 3:
                    tempJ[paList[0]][paList[1]][paList[2]] = operVale(methodValue, old[paList[0]][paList[1]][paList[2]]);
                    break;
                case 4:
                    tempJ[paList[0]][paList[1]][paList[2]][paList[3]] = operVale(methodValue, old[paList[0]][paList[1]][paList[2]][paList[3]]);
                    break;
                case 5:
                    tempJ[paList[0]][paList[1]][paList[2]][paList[3]][paList[4]] = operVale(methodValue, old[paList[0]][paList[1]][paList[2]][paList[3]][paList[4]]);
                    break;
                case 6:
                    tempJ[paList[0]][paList[1]][paList[2]][paList[3]][paList[4]][paList[5]] = operVale(methodValue, old[paList[0]][paList[1]][paList[2]][paList[3]][paList[4]][paList[5]]);
                    break;
                case 7:
                    tempJ[paList[0]][paList[1]][paList[2]][paList[3]][paList[4]][paList[5]][paList[6]] = operVale(methodValue, old[paList[0]][paList[1]][paList[2]][paList[3]][paList[4]][paList[5]][paList[6]]);
                    break;
                case 8:
                    tempJ[paList[0]][paList[1]][paList[2]][paList[3]][paList[4]][paList[5]][paList[6]][paList[7]] = operVale(methodValue, old[paList[0]][paList[1]][paList[2]][paList[3]][paList[4]][paList[5]][paList[6]][paList[7]]);
                    break;
                default:
                    throw new Error(error_1.FASTDB_UPDATE_JSON_ERROR);
            }
            return tempJ;
        }
        let oldJson = query;
        for (let pa in params) {
            oldJson = changeJson(oldJson, pa, params[pa]);
        }
        result = oldJson;
    }
    return result;
}
exports.default = updateTrans;
