"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pathTo_1 = require("../utils/pathTo");
const timeHash_1 = require("../utils/timeHash");
const error_1 = require("../constants/error");
const utils_1 = require("../utils/utils");
const fs = require('fs');
function fetchSet(table, params = {}) {
    const filePath = pathTo_1.pathTo(table);
    let oldBuf;
    if (!fs.existsSync(filePath)) {
        pathTo_1.mkdir(filePath, '[]');
    }
    let rid = timeHash_1.strHash();
    if (!params.id) {
        delete params._fid;
        params = Object.assign({ _fid: rid, id: rid }, params);
    }
    else {
        delete params._fid;
        params = Object.assign({ _fid: params.id }, params);
    }
    oldBuf = fs.readFileSync(filePath);
    if (utils_1.isNumber(params._fid)) {
        if (oldBuf.includes(`"_fid":${params._fid}`)) {
            throw new Error(error_1.FASTDB_HAVE_ID_ERROR + ': ' + params._fid);
        }
    }
    else {
        if (oldBuf.includes(`"_fid":"${params._fid}"`)) {
            throw new Error(error_1.FASTDB_HAVE_ID_ERROR + ': ' + params._fid);
        }
    }
    let offset = oldBuf.length - 1;
    let nowBuf = Buffer.from((oldBuf.length === 2 ? '' : ',') + JSON.stringify(utils_1.changeSetParams(params)) + ']');
    let tempBuf = Buffer.concat([oldBuf, Buffer.allocUnsafe(nowBuf.length - 1)]);
    let addBuf = tempBuf.fill(nowBuf, offset);
    fs.writeFileSync(filePath, addBuf);
    return { data: { insertId: params.id } };
}
exports.default = fetchSet;
